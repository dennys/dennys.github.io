<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SonarQube on Dennys Diary</title>
    <link>https://dennys.github.io/en/tags/sonarqube/</link>
    <description>Recent content in SonarQube on Dennys Diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 26 Jan 2025 22:00:00 +0800</lastBuildDate><atom:link href="https://dennys.github.io/en/tags/sonarqube/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitLab Node.js SonarQube Integration</title>
      <link>https://dennys.github.io/en/doc/devops/gitlab-nodejs-dependency-test-sonarqube/</link>
      <pubDate>Sun, 26 Jan 2025 22:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/gitlab-nodejs-dependency-test-sonarqube/</guid>
      <description>
        
          
            Purpose In the fast-evolving landscape of software development, ensuring code quality and security is paramount. To streamline this process, integrating a robust set of tools becomes imperative. In this blog, we embark on a journey to seamlessly integrate GitLab, SonarQube, pytest, coverage.py, and dependency-check into a unified ecosystem. By combining version control, code analysis, testing, code coverage evaluation, and dependency scanning, we aim to create a powerful and efficient pipeline that not only enhances the overall quality of the codebase but also fortifies it against potential vulnerabilities.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python Code Quality: GitLab, SonarQube, OWASP, Dependency-Check, and Essential Dev Tools Integration</title>
      <link>https://dennys.github.io/en/doc/devops/python-quality-gitlab-sonarqube-owasp-dependency/</link>
      <pubDate>Sat, 25 Jan 2025 22:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/python-quality-gitlab-sonarqube-owasp-dependency/</guid>
      <description>
        
          
            Purpose In the fast-evolving landscape of software development, ensuring code quality and security is paramount. To streamline this process, integrating a robust set of tools becomes imperative. In this blog, we embark on a journey to seamlessly integrate GitLab, SonarQube, pytest, coverage.py, and dependency-check into a unified ecosystem. By combining version control, code analysis, testing, code coverage evaluation, and dependency scanning, we aim to create a powerful and efficient pipeline that not only enhances the overall quality of the codebase but also fortifies it against potential vulnerabilities.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Run SonarQube on Linux Docker with Mono to scan .NET 4.8 Code</title>
      <link>https://dennys.github.io/en/doc/devops/sonarqube-mono-dotnet4-integration/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/sonarqube-mono-dotnet4-integration/</guid>
      <description>
        
          
            Requirement We know how to run SonarQube to scan .NET 4 code in GitLab + SonarQube + .NET 4.8 (non-docker), but it needs a Windows environment and does not support Linux.
Therefore, we want to find a solution to run SonarQube on Linux in docker if possible. In this artiflce, we try to use Mono framework (a cross platform .NET 4.7 framework) to run SonarQube on Linux to scan .NET 4 code.
          
          
        
      </description>
    </item>
    
    <item>
      <title>GitLab SonarQube Integration with .NET</title>
      <link>https://dennys.github.io/en/doc/devops/gitlab-sonarqube-integration-dotnet/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/gitlab-sonarqube-integration-dotnet/</guid>
      <description>
        
          
            If you want to use SonarQube to scan your code during GitLab&#39;s CI/CD flow, please see the following procedures.
GitLab + SonarQube + .NET Core or .NET 5/6/7/... (docker) Refer to this document to integrate GitLab and SonarQube.
Set the environment variable in GitLab
$SONAR_URL: The URL of SonarQube $SONAR_TOKEN: The token to access SonarQube $CI_PROJECT_DIR: This is a predifined variable in GitLab, you can reference https://docs.gitlab.com/ee/ci/variables/predefined_variables.html $CI_JOB_NAME: This is a predifined variable in GitLab, you can reference https://docs.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Use Grafana to Manage SonarQube KPI</title>
      <link>https://dennys.github.io/en/doc/devops/grafana-sonarqube-integration/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/grafana-sonarqube-integration/</guid>
      <description>
        
          
            Requirement Usually we use SonarQube to check the KPI of projects: You can also check the build history of a project: Use Grafana to Manager SonarQube KPI But there are some SonarQube exporters, they can export SonarQube&#39;s KPI to Grafana/Prometheus.
Solution 1 Exporter: https://github.com/dmeiners88/sonarqube-prometheus-exporter: It&#39;s a SonarQube plugin, but it only supports 5 KPIs, and the last commit date is 2018/11/9. It supports SonarQube 7, not sure if it supports 8 or 9, I don&#39;t plan to try it.
          
          
        
      </description>
    </item>
    
    <item>
      <title>GitLab Checkmarx SonarQube Integration</title>
      <link>https://dennys.github.io/en/doc/devops/gitlab-checkmarx-sonarqube-integration/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/en/doc/devops/gitlab-checkmarx-sonarqube-integration/</guid>
      <description>
        
          
            Purpose In previous article, we know how to integrate GitLab and Checkmarx. In this article, we want to integrate SonarQube too. When we commit code to GitLab, we want GitLab to trigger these actions automatically:
GitLab sends the code to Checkmarx to scan. GitLab triggers SonarQube to scan. SonarQube integrates Checkmarx&#39;s report. Procedure You can reference the official document: https://checkmarx.atlassian.net/wiki/spaces/SD/pages/169246832/SonarQube+Plugin+v8.5.0+and+up
Download the plugin from here, it only supports SonarQube LTS version (for now, it&#39;s 8.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
