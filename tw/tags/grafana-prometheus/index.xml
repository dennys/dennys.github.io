<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grafana-Prometheus on Dennys Diary</title>
    <link>https://dennys.github.io/tw/tags/grafana-prometheus/</link>
    <description>Recent content in Grafana-Prometheus on Dennys Diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 06 Jul 2022 00:18:32 +0800</lastBuildDate><atom:link href="https://dennys.github.io/tw/tags/grafana-prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Prometheus 來監控 OpenVPN server</title>
      <link>https://dennys.github.io/tw/doc/network/openvpn-server-prometheus/</link>
      <pubDate>Wed, 06 Jul 2022 00:18:32 +0800</pubDate>
      
      <guid>https://dennys.github.io/tw/doc/network/openvpn-server-prometheus/</guid>
      <description>
        
          
            需求 如果你已經有了一個自己管理的 OpenVPN access server, 他本身是有一個簡單的管理介面, 但在這個時代, 用 Grafana + Prometheus 應該是比較好的選擇.
OpenVPN 的 Prometheus 方案 Google 一下有幾個, 不過因為我們用的是自建的 OpenVPN Access Server, 只能用這個.
https://github.com/lfdominguez/openvpn-access-exporter 這個是不能用的, 不過很可惜, 這個的功能看來比較多.
https://github.com/kumina/openvpn_exporter 安裝使用 下載適合你環境的程式 (https://github.com/lfdominguez/openvpn-access-exporter/releases)
執行下列指令啟動 exporter
1$ openvpn-access-exporter --file /usr/local/openvpn_as/etc/db/log.db 2[2022-07-05T23:10:41Z INFO openvpn_access_exporter] Using file: /usr/local/openvpn_as/etc/db/log.db 連線到 http://localhost:9185, 就會看到類似下面的 metrics
1# HELP access_counter Requests counter 2# TYPE access_counter counter 3access_counter 61 4# HELP openvpn_user_bytes_in Bytes in 5# TYPE openvpn_user_bytes_in gauge 6openvpn_user_bytes_in{common_name=&amp;#34;user1&amp;#34;,node=&amp;#34;vm1655366325290-2779681-iaas&amp;#34;,real_ip=&amp;#34;x.x.x.x&amp;#34;,session_id=&amp;#34;hYTtny0ozcppC3tS&amp;#34;,username=&amp;#34;user1&amp;#34;,vpn_ip=&amp;#34;172.27.224.2&amp;#34;} 3623 1656473784000 7openvpn_user_bytes_in{common_name=&amp;#34;user1&amp;#34;,node=&amp;#34;vm1655366325290-2779681-iaas&amp;#34;,real_ip=&amp;#34;x.
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用 PostgreSQL 當作 Grafana 的資料庫</title>
      <link>https://dennys.github.io/tw/doc/grafana/grafana-postgresql/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/tw/doc/grafana/grafana-postgresql/</guid>
      <description>
        
          
            Grafana, 支援三種資料庫, SQLite, PostgreSQL, MySQL. 如果你甚麼都沒設定, Grafana 預設會使用 SQLite. 量小還好, 但量變大時, 維護起來就麻煩, 而且資料也沒法直接 migration. (是有個非官方的工具在這 https://github.com/wbh1/grafana-sqlite-to-postgres). 如果一開始就要用 PostgreSQL, 有些前置動作要準備好.
目錄設定 一開始的目錄設定如下, 請自行修改成你的環境
/opt/grafana/postgresql =&amp;gt; 放 PostgreSQL data /opt/grafana/grafana =&amp;gt; 放 Grafana data 設定方法 先把 PostgreSQL 用 docker-compose 跑起來, 並確認資料和連線正常
PostgreSQL 的 docker-compose.yml 如下:
1postgres: 2image: postgres:14 3container_name: postgres 4networks: 5 - grafananet 6expose: 7 - 5432 8ports: 9 - 5432:5432 # Postgres port 10volumes: 11 - /opt/grafana/postgresql/:/var/lib/postgresql 12 - /opt/grafana/postgresql/data/:/var/lib/postgresql/data 13environment: 14 POSTGRES_USER: ******** # define credentials 15 POSTGRES_PASSWORD: ******** # define credentials 16 POSTGRES_DB: ******** # define database 17 TZ: Asia/Singapore # This is for PostgreSQL&amp;#39;s time zone 18 PGTZ: Asia/Singapore # This is for PostgreSQL&amp;#39;s time zone 執行下列指令啟動 PostgreSQL
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
