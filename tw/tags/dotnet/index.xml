<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DotNet on Dennys Diary</title>
    <link>https://dennys.github.io/tw/tags/dotnet/</link>
    <description>Recent content in DotNet on Dennys Diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://dennys.github.io/tw/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 dotNet GUI 呼叫檔案總管的 Context Menu</title>
      <link>https://dennys.github.io/tw/doc/dotnet/show-explorer-context-menu/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/tw/doc/dotnet/show-explorer-context-menu/</guid>
      <description>
        
          
            需求 顯示一個檔案總管的 Context Menu, 輸入參數是檔案名稱陣列.
環境 Visual Studio Community 2022 3rd party library: https://www.codeproject.com/Articles/22012/Explorer-Shell-Context-Menu 這個是 WinForm (Windows Forms), 如果你是用 WPF (Windows Presentation Foundation), 需要在 .csproj 加上 &amp;lt;UseWindowsForms&amp;gt;true&amp;lt;/UseWindowsForms&amp;gt; 顯示一個檔案總管的 Context Menu Download the component from https://www.codeproject.com/Articles/22012/Explorer-Shell-Context-Menu. Extract ShellContextMenu.cs from the above zip file and put it into your project. 執行以下指令, 就會在游標處顯示檔案總管的 context menu. 1using Peter; 2 3public MainWindow() { 4 ShellContextMenu ctxMnu = new ShellContextMenu(); 5 FileInfo[] arrFI = new FileInfo[1]; 6 arrFI[0] = new FileInfo(@&amp;#34;c:\cmd.
          
          
        
      </description>
    </item>
    
    <item>
      <title>在 dotNet WPF 裡面使用 WinForm</title>
      <link>https://dennys.github.io/tw/doc/dotnet/run-winform-in-wpf/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/tw/doc/dotnet/run-winform-in-wpf/</guid>
      <description>
        
          
            需求 本來以為 WinForm (Windows Forms) 和 WPF (Windows Presentation Foundation) 是不相容的, 後來發現不但可以混用, 而且 WPF 可以在同一個 Window 裡面直接叫用 WinForm 的元件, 如下:
環境 Visual Studio Community 2022 作法 首先要在 .csproj 加上 &amp;lt;UseWindowsForms&amp;gt;true&amp;lt;/UseWindowsForms&amp;gt;
1&amp;lt;Project Sdk=&amp;#34;Microsoft.NET.Sdk&amp;#34;&amp;gt; 2&amp;lt;PropertyGroup&amp;gt; 3 &amp;lt;OutputType&amp;gt;WinExe&amp;lt;/OutputType&amp;gt; 4 &amp;lt;TargetFramework&amp;gt;net7.0-windows&amp;lt;/TargetFramework&amp;gt; 5 &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt; 6 &amp;lt;UseWPF&amp;gt;true&amp;lt;/UseWPF&amp;gt; 7 &amp;lt;UseWindowsForms&amp;gt;true&amp;lt;/UseWindowsForms&amp;gt; 8&amp;lt;/PropertyGroup&amp;gt; 9&amp;lt;/Project&amp;gt; 如果是整個 .cs 都要用 WinForm, 那在程式宣告加上 using System.Windows.Forms, 就整個程式都可以用
1using System.Windows.Forms; 如果是只有幾行要用, 那可以在使用的時候直接把整個 namespace 寫進去, 這樣也可以避免同樣的名稱打架. 譬如下面這兩個都叫做 Cursor
1System.Windows.Forms.Cursor.Position 2System.Windows.FrameworkElement.Cursor 參考 https://stackoverflow.com/questions/9646684/cant-use-system-windows-forms 
          
          
        
      </description>
    </item>
    
    <item>
      <title>C# MVVM 中兩個 View Model 之間如何分享組件</title>
      <link>https://dennys.github.io/tw/doc/dotnet/sharing-components-between-two-view-models-in-csharp-mvvm/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0800</pubDate>
      
      <guid>https://dennys.github.io/tw/doc/dotnet/sharing-components-between-two-view-models-in-csharp-mvvm/</guid>
      <description>
        
          
            需求 我有兩個 View Model — MainViewModel 和 OptionViewModel -, 他們共用一個名為 CustomConfiguration 的元件. 需求是在 MainWindow 中將資料載入 MainViewModel,並當在 MainWindow 上點選 Option 按鈕時, 會開啟 OptionWindow,並將 CustomConfiguration 資料傳遞給它.
Code MainWindow.xaml 這裡只有 bind data (CustomConfig.GeneralSettings.IsLogEnabled) 和設定 command.
1&amp;lt;Window.DataContext&amp;gt; 2 &amp;lt;local:MainViewModel /&amp;gt; 3&amp;lt;/Window.DataContext&amp;gt; 4&amp;lt;StackPanel&amp;gt; 5 &amp;lt;TextBlock Text=&amp;#34;{Binding CustomConfig.GeneralSettings.IsLogEnabled}&amp;#34; /&amp;gt; 6 &amp;lt;Button Content=&amp;#34;Open Options&amp;#34; Command=&amp;#34;{Binding OpenOptionsCommand}&amp;#34; /&amp;gt; 7&amp;lt;/StackPanel&amp;gt; OptionWindow.xaml 和 MainWindow.xaml 類似, 這裡只有 bind data (CustomConfig.GeneralSettings.IsLogEnabled) 和設定 command..
1&amp;lt;Window.DataContext&amp;gt; 2 &amp;lt;local:OptionViewModel /&amp;gt; 3&amp;lt;/Window.DataContext&amp;gt; 4&amp;lt;StackPanel&amp;gt; 5 &amp;lt;CheckBox Content=&amp;#34;Enable Logging&amp;#34; IsChecked=&amp;#34;{Binding CustomConfig.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
